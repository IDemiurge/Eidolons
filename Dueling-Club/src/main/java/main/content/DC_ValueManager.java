package main.content;

import main.content.values.parameters.PARAMETER;
import main.game.core.game.DC_Game;
import main.system.auxiliary.EnumMaster;
import main.system.auxiliary.StringMaster;

import java.util.LinkedList;
import java.util.List;

public class DC_ValueManager implements ValueManager {

    public DC_ValueManager(DC_Game game) {

    }

    private static VALUE_GROUP getValueGroup(String string) {
        VALUE_GROUP template = new EnumMaster<VALUE_GROUP>().retrieveEnumConst(VALUE_GROUP.class,
         StringMaster.cropValueGroup(string));
        return (template);
    }

    public static PARAMETER[] getGroupParams(String string) {
        VALUE_GROUP valueGroup = getValueGroup(string);
        if (valueGroup == null) {
            return null;
        }
        return valueGroup.getParams();
    }

    public boolean checkValueGroup(String string) {
        if (!string.contains(StringMaster.VALUE_GROUP_OPEN_CHAR)) {
            return false;
        }

        return getValueGroup(string) != null;
    }

    @Override
    public PARAMETER[] getValueGroupParams(String string) {
        VALUE_GROUP valueGroup = getValueGroup(string);
        if (valueGroup == null) {
            return null;
        }
        return valueGroup.getParams();
    }

    @Override
    public PARAMETER[] getParamsFromContainer(String sparam) {
        List<String> container = StringMaster.openContainer(sparam, StringMaster.AND_SEPARATOR);
        LinkedList<PARAMETER> params = new LinkedList<>();
        for (String s : container) {
            PARAMETER param = ContentManager.getPARAM(s);
            if (param != null) {
                params.add(param);
            } else {
                param = ContentManager.getMastery(s);
                if (param != null) {
                    params.add(param);
                }
            }
        }
        return params.toArray(new PARAMETER[params.size()]);

    }

    @Override
    public boolean isRolledRoundind(PARAMETER valueToPay) {
        if (valueToPay == PARAMS.C_N_OF_ACTIONS) {
            return true;
        }
        return false;
    }

    public enum VALUE_GROUP {
        MAGIC(ValuePages.MASTERIES_MAGIC_SCHOOLS),

        ARCANE(PARAMS.CONJURATION_MASTERY, PARAMS.SORCERY_MASTERY, PARAMS.ENCHANTMENT_MASTERY),
        DARK(PARAMS.PSYCHIC_MASTERY, PARAMS.SHADOW_MASTERY, PARAMS.WITCHERY_MASTERY),
        CHAOS(PARAMS.WARP_MASTERY, PARAMS.DESTRUCTION_MASTERY, PARAMS.DEMONOLOGY_MASTERY),
        DEATH(PARAMS.NECROMANCY_MASTERY, PARAMS.BLOOD_MAGIC_MASTERY, PARAMS.AFFLICTION_MASTERY),
        LIGHT(PARAMS.REDEMPTION_MASTERY, PARAMS.CELESTIAL_MASTERY, PARAMS.BENEDICTION_MASTERY),
        LIFE(PARAMS.SAVAGE_MASTERY, PARAMS.ELEMENTAL_MASTERY, PARAMS.SYLVAN_MASTERY),

        PRIMAL_MAGIC(PARAMS.SORCERY_MASTERY, PARAMS.WITCHERY_MASTERY, PARAMS.SAVAGE_MASTERY, PARAMS.DESTRUCTION_MASTERY, PARAMS.AFFLICTION_MASTERY),

        FORBIDDEN_ARTS(PARAMS.BLOOD_MAGIC_MASTERY, PARAMS.WARP_MASTERY, PARAMS.DEMONOLOGY_MASTERY, PARAMS.PSYCHIC_MASTERY),

        REVERED_ARTS(PARAMS.SHADOW_MASTERY, PARAMS.REDEMPTION_MASTERY, PARAMS.BENEDICTION_MASTERY, PARAMS.SYLVAN_MASTERY),

        HIGH_ARTS(PARAMS.CONJURATION_MASTERY, PARAMS.CELESTIAL_MASTERY, PARAMS.ENCHANTMENT_MASTERY, PARAMS.ELEMENTAL_MASTERY,

         PARAMS.NECROMANCY_MASTERY),

        MAGIC_SKILLS(PARAMS.WIZARDRY_MASTERY, PARAMS.SPELLCRAFT_MASTERY),

        SPIRIT_SKILLS(PARAMS.MEDITATION_MASTERY, PARAMS.DIVINATION_MASTERY),

        SURVIVAL_SKILLS(PARAMS.ATHLETICS_MASTERY, PARAMS.MOBILITY_MASTERY, PARAMS.UNARMED_MASTERY, PARAMS.MARKSMANSHIP_MASTERY, PARAMS.DETECTION),
        NOBLE_SKILLS(PARAMS.LEADERSHIP_MASTERY, PARAMS.TACTICS_MASTERY, PARAMS.DEFENSE_MASTERY, PARAMS.SHIELD_MASTERY),
        SHADY_SKILLS(PARAMS.MOBILITY_MASTERY, PARAMS.STEALTH_MASTERY, PARAMS.DETECTION, PARAMS.BLADE_MASTERY, PARAMS.ITEM_MASTERY, PARAMS.DUAL_WIELDING_MASTERY),

        SOLDIER_SKILLS(PARAMS.ARMORER_MASTERY, PARAMS.ATHLETICS_MASTERY, PARAMS.POLEARM_MASTERY, PARAMS.DISCIPLINE_MASTERY, PARAMS.SHIELD_MASTERY),

        DARK_ARTS(PARAMS.PSYCHIC_MASTERY, PARAMS.SHADOW_MASTERY, PARAMS.WITCHERY_MASTERY),
        ARCANE_ARTS(PARAMS.CONJURATION_MASTERY, PARAMS.SORCERY_MASTERY, PARAMS.ENCHANTMENT_MASTERY),
        DEATH_ARTS(PARAMS.NECROMANCY_MASTERY, PARAMS.BLOOD_MAGIC_MASTERY, PARAMS.AFFLICTION_MASTERY),
        HOLY_ARTS(PARAMS.REDEMPTION_MASTERY, PARAMS.CELESTIAL_MASTERY, PARAMS.BENEDICTION_MASTERY),
        CHAOS_ARTS(PARAMS.WARP_MASTERY, PARAMS.DESTRUCTION_MASTERY, PARAMS.DEMONOLOGY_MASTERY),
        ARTS_OF_NATURE(PARAMS.SAVAGE_MASTERY, PARAMS.ELEMENTAL_MASTERY, PARAMS.SYLVAN_MASTERY),

        OFFENSE(PARAMS.UNARMED_MASTERY, PARAMS.DUAL_WIELDING_MASTERY, PARAMS.TWO_HANDED_MASTERY),
        ANY_OFFENSE(PARAMS.MARKSMANSHIP_MASTERY, PARAMS.UNARMED_MASTERY, PARAMS.DUAL_WIELDING_MASTERY, PARAMS.TWO_HANDED_MASTERY),
        BODY(PARAMS.ATHLETICS_MASTERY, PARAMS.MOBILITY_MASTERY),
        DEFENSE(PARAMS.ARMORER_MASTERY, PARAMS.DEFENSE_MASTERY, PARAMS.SHIELD_MASTERY),
        ANY_DEFENSE(PARAMS.ARMORER_MASTERY, PARAMS.DEFENSE_MASTERY, PARAMS.SHIELD_MASTERY),
        WEAPON(PARAMS.BLUNT_MASTERY, PARAMS.BLADE_MASTERY, PARAMS.POLEARM_MASTERY, PARAMS.AXE_MASTERY),
        KNIGHTLY_WEAPONS(PARAMS.BLADE_MASTERY, PARAMS.BLUNT_MASTERY, PARAMS.POLEARM_MASTERY),
        MARTIAL_WEAPONS(PARAMS.BLADE_MASTERY, PARAMS.BLUNT_MASTERY, PARAMS.AXE_MASTERY),
        PRIMITIVE_WEAPONS(PARAMS.UNARMED_MASTERY, PARAMS.BLUNT_MASTERY, PARAMS.AXE_MASTERY, PARAMS.POLEARM_MASTERY),

        // KNIGHTLY_ARTS(PARAMS.BLADE_MASTERY, PARAMS.POLEARM_MASTERY),
        // ROGUE_SKILLS(PARAMS.BLADE_MASTERY, PARAMS.POLEARM_MASTERY),
        // WARRIOR_ARTS(PARAMS.BLADE_MASTERY, PARAMS.POLEARM_MASTERY),
        // SOLDIER_SKILLS(PARAMS.BLADE_MASTERY, PARAMS.POLEARM_MASTERY),
        // WIZARDING_SKILLS(PARAMS.BLADE_MASTERY, PARAMS.POLEARM_MASTERY),
        // SORCEROUS_ARTS(PARAMS.BLADE_MASTERY, PARAMS.POLEARM_MASTERY),

        PENALTIES(ValuePages.PENALTIES),
        RESISTANCES(ValuePages.RESISTANCES),
        PHYSICAL_RESISTANCES(ValuePages.PHYSICAL_RESISTANCES),
        NATURAL_RESISTANCES(ValuePages.NATURAL_RESISTANCES),
        ASTRAL_RESISTANCES(ValuePages.ASTRAL_RESISTANCES),
        ELEMENTAL_RESISTANCES(ValuePages.ELEMENTAL_RESISTANCES),
        MAGIC_RESISTANCES(ValuePages.MAGIC_RESISTANCES),
        SPELL_PENALTIES(ValuePages.PENALTIES),
        ATK_PENALTIES(ValuePages.PENALTIES),
        MOVE_PENALTIES(ValuePages.PENALTIES),
        ATTRIBUTES(ValuePages.ATTRIBUTES),
        XP_MOD(PARAMS.XP_LEVEL_MOD, PARAMS.XP_GAIN_MOD),

        MAGIC_SCORE(true, PARAMS.PSYCHIC_MASTERY, PARAMS.ENCHANTMENT_MASTERY, PARAMS.NECROMANCY_MASTERY, PARAMS.REDEMPTION_MASTERY, PARAMS.SAVAGE_MASTERY, PARAMS.WARP_MASTERY, PARAMS.DESTRUCTION_MASTERY, PARAMS.CELESTIAL_MASTERY, PARAMS.ELEMENTAL_MASTERY, PARAMS.SHADOW_MASTERY, PARAMS.WITCHERY_MASTERY, PARAMS.CONJURATION_MASTERY, PARAMS.SORCERY_MASTERY),
        ARCANE_SCORE(true, PARAMS.CONJURATION_MASTERY, PARAMS.SORCERY_MASTERY, PARAMS.ENCHANTMENT_MASTERY),
        DARK_SCORE(true, PARAMS.PSYCHIC_MASTERY, PARAMS.SHADOW_MASTERY, PARAMS.WITCHERY_MASTERY),
        CHAOS_SCORE(true, PARAMS.WARP_MASTERY, PARAMS.DESTRUCTION_MASTERY, PARAMS.DEMONOLOGY_MASTERY),
        DEATH_SCORE(true, PARAMS.NECROMANCY_MASTERY, PARAMS.BLOOD_MAGIC_MASTERY, PARAMS.AFFLICTION_MASTERY),
        LIGHT_SCORE(true, PARAMS.REDEMPTION_MASTERY, PARAMS.CELESTIAL_MASTERY, PARAMS.BENEDICTION_MASTERY),
        LIFE_SCORE(true, PARAMS.SAVAGE_MASTERY, PARAMS.ELEMENTAL_MASTERY, PARAMS.SYLVAN_MASTERY),
        OFFENSE_SCORE(true, PARAMS.UNARMED_MASTERY, PARAMS.DUAL_WIELDING_MASTERY, PARAMS.TWO_HANDED_MASTERY),
        ANY_OFFENSE_SCORE(true, PARAMS.MARKSMANSHIP_MASTERY, PARAMS.UNARMED_MASTERY, PARAMS.DUAL_WIELDING_MASTERY, PARAMS.TWO_HANDED_MASTERY),
        BODY_SCORE(true, PARAMS.ATHLETICS_MASTERY, PARAMS.MOBILITY_MASTERY),
        DEFENSE_SCORE(true, PARAMS.ARMORER_MASTERY, PARAMS.DEFENSE_MASTERY, PARAMS.SHIELD_MASTERY),
        ANY_DEFENSE_SCORE(true, PARAMS.ARMORER_MASTERY, PARAMS.DEFENSE_MASTERY, PARAMS.SHIELD_MASTERY),
        WEAPON_SCORE(true, PARAMS.BLUNT_MASTERY, PARAMS.BLADE_MASTERY, PARAMS.POLEARM_MASTERY, PARAMS.AXE_MASTERY),;
        private PARAMETER[] params;
        private boolean score;

        VALUE_GROUP(boolean score, PARAMETER... params) {
            this(params);
            this.score = score;

        }

        VALUE_GROUP(PARAMETER... params) {
            this.setParams(params);
        }

        public PARAMETER[] getParams() {
            if (score) {
                List<PARAMETER> list = new LinkedList<>();
                for (PARAMETER p : params) {
                    list.add(ContentManager.getMasteryScore(p));
                }
                params = list.toArray(new PARAMETER[params.length]);
                score = false;
            }
            return params;
        }

        public void setParams(PARAMETER[] params) {
            this.params = params;
        }
    }
}
