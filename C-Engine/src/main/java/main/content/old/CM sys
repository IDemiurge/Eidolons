Hierarchy
Keep in mind New Rules

classifications - prime, derived, dynamic,
and groups - defensive, status, 
+ by type (armor, weapon, unit, character, action, spell, cantrip ...)
do units have any parameters other than Prime? 
Items and skills determine the derived ones, don't they? 
metainfo 

value type for each param? 

constructor (args) 
generic class constructor and specific args ? 
STR (UNIT.class, prime)...

Or specific class with a specific constructor?

UnitParam STR = new UnitParam (...)


Ok, once again, what's wrong with Enums? 
They do not allow inheritance. 

What's wrong with not using enums? 
- how to manage constants ? 


What content is going to be developed this way? The foundations - param types, prop types, their values, 

So what should a 
TYPE
+obj group
+

PARAMETER TYPE
TAG/GROUP [] (status, 

PARAMETER VALUE - define boundaries for AV in metainfo

PROP type
TAG/GROUP [] (status, 

Race

PROP value


e.g. Dark Elf, Human ...






How about this:

Obj type enum 
each with subtypes 

each item has an array of types and subtypes


a single enum class then? with a powerful constructor and lots of args for each constant? 
problems: browsing, search, development (messy and hulky)




Reduce all costs by 50%
reduce all requirements by...
if target has at 
so COSTS and REQUIREMENTS should be tags? 
HP% cost 
Tags don't have to be declared anywhere, only if for AV convenience. So go ahead and point out that Dark Elf is a Dark race ;) 

Some, like ANGLE are not for AV at all! They are non-static, in-game 

My own enum implementation with values() method

Loaded statically into Prop/param maps? 
A single map or multiple ones? 
How are they to be searched? 
Maps String to ...? VALUE object? 
Suppose I have 1 common/generic map + a map per Type; AV will look in the G one and specific one
The keyset will serve as the list of value lines for each type

Content groups will be used to form the Tree View  

PROP 


#################
NEW IDEA
##################
Enums as shells for the VALUE or TYPE objects which will be constructed from each enum constant 
Thus, developing content will be done in just one enumeration, but extensive constructors will allow 
creating powerful and info-rich content items. 




