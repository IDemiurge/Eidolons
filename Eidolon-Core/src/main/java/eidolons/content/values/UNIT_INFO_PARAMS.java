package eidolons.content.values;

import eidolons.content.PARAMS;
import main.content.VALUE;
import main.content.values.parameters.PARAMETER;
import main.content.values.properties.G_PROPS;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.Pair;

import java.util.HashMap;
import java.util.Map;

public interface UNIT_INFO_PARAMS {
     PARAMETER[] RESOURCE_COSTS = {
     PARAMS.AP_COST,   PARAMS.ESS_COST,
     PARAMS.FOC_COST, PARAMS.ENDURANCE_COST,
             PARAMS.ATK_PTS_COST,
             PARAMS.MOVE_PTS_COST,
    };

    Pair<PARAMETER, PARAMETER> MIN_REQ_RES_FOR_USE = new ImmutablePair<>(PARAMS.FOC_REQ, PARAMS.FOCUS);

    PARAMETER[] COSTS_ICON_PARAMS = {
     PARAMS.INITIATIVE,
     PARAMS.ESSENCE, PARAMS.FOCUS,
     PARAMS.ENDURANCE,
    };

    PARAMS[] ARMOR_TOOLTIP = {
     PARAMS.ARMOR, PARAMS.C_DURABILITY,
     PARAMS.COVER_PERCENTAGE, PARAMS.HARDNESS,
     PARAMS.ARMOR_LAYERS, PARAMS.WEIGHT,
     PARAMS.ATB_COST_MOD, PARAMS.TOUGHNESS_COST_MOD,
     PARAMS.ESSENCE_COST_MOD, PARAMS.FOCUS_COST_MOD,
     PARAMS.ATTACK_MOD, PARAMS.DEFENSE_MOD,
//     SPELL_ARMOR,
    };

    PARAMS[] WEAPON_DC_INFO_PARAMS = {
       PARAMS.DAMAGE_MOD,
     PARAMS.DICE, PARAMS.DIE_SIZE,
     PARAMS.ATTACK_BONUS, PARAMS.ATTACK_MOD,
     PARAMS.DEFENSE_BONUS, PARAMS.DEFENSE_MOD,
       PARAMS.HARDNESS,
     PARAMS.STR_DMG_MODIFIER, PARAMS.AGI_DMG_MODIFIER,
     PARAMS.SP_DMG_MODIFIER, PARAMS.INT_DMG_MODIFIER,
       PARAMS.ARMOR_PENETRATION,
     PARAMS.DURABILITY_DAMAGE_MOD, PARAMS.DURABILITY_SELF_DAMAGE_MOD,
     PARAMS.ATTACK_ATB_COST_MOD, PARAMS.ATTACK_TOUGHNESS_COST_MOD,
    };

    //                                   <><><><><>

    PARAMS[][] UNIT_INFO_PARAMS_GENERAL = {
     {
         PARAMS.ATB_START_MOD,
      PARAMS.STARTING_FOCUS,
//      BASE_MORALE,
      PARAMS.ENDURANCE_REGEN,
      PARAMS.TOUGHNESS_RECOVERY,
//      UNCONSCIOUS_THRESHOLD
     },
     {
      PARAMS.SIGHT_RANGE,
      PARAMS.HEIGHT,
      PARAMS.WEIGHT, PARAMS.CARRYING_CAPACITY,
      PARAMS.ILLUMINATION, PARAMS.CONCEALMENT
     },
     {
      PARAMS.FOCUS_RETAINMENT, PARAMS.FOCUS_RESTORATION,
      PARAMS.ESSENCE_RETAINMENT, PARAMS.ESSENCE_RESTORATION,

//     FATIGUE, CONFUSION,
//      FEAR_RESISTANCE, WOUNDS_RESISTANCE,
//      BASH_RESISTANCE,
     },

    };
    PARAMS[][] UNIT_INFO_PARAMS_COMBAT = {
     {
      PARAMS.ATTACK_ATB_COST_MOD, PARAMS.ATTACK_TOUGHNESS_COST_MOD,
      PARAMS.MOVE_ATB_COST_MOD, PARAMS.MOVE_TOU_COST_MOD,

      PARAMS.DIAGONAL_ATTACK_MOD, PARAMS.DIAGONAL_DAMAGE_MOD,
      PARAMS.SIDE_ATTACK_MOD, PARAMS.SIDE_DAMAGE_MOD,
     },
     {
      PARAMS.CRITICAL_MOD, PARAMS.COUNTER_MOD,
     },
     {
      PARAMS.ARMOR_PENETRATION, PARAMS.BLOCK_PENETRATION,
      PARAMS.DEFENSE_PENETRATION, PARAMS.PARRY_PENETRATION,
      PARAMS.ACCURACY, PARAMS.EVASION,
      PARAMS.BLOCK_CHANCE,


     },
    };
    PARAMS[][] UNIT_INFO_PARAMS_MISC = {
     {
      PARAMS.QUICK_SLOTS, PARAMS.ITEM_COST_MOD,
      PARAMS.DETECTION, PARAMS.STEALTH,
      PARAMS.SNEAK_DEFENSE_PENETRATION, PARAMS.SNEAK_ARMOR_PENETRATION,
      PARAMS.SNEAK_ATTACK_MOD, PARAMS.SNEAK_DAMAGE_MOD,
     },
     {
      PARAMS.CADENCE_AP_MOD, PARAMS.CADENCE_ATTACK_MOD,
      PARAMS.CADENCE_BONUS, PARAMS.CADENCE_DAMAGE_MOD,
      PARAMS.CADENCE_DEFENSE_MOD, PARAMS.CADENCE_FOCUS_BOOST,
      PARAMS.CADENCE_TOU_MOD, PARAMS.CADENCE_RETAINMENT_CHANCE,
     },

    };

    PARAMS[][] UNIT_INFO_PARAMS_MAGIC = {
     {
      PARAMS.SPELL_ESS_COST_MOD,
      PARAMS.SPELL_ATB_COST_MOD,
      PARAMS.SPELL_FOC_COST_MOD,

      PARAMS.RESISTANCE_PENETRATION,
      PARAMS.MEMORIZATION_CAP,
      PARAMS.MEMORY_REMAINING,
     },
     {
      PARAMS.DIVINATION_CAP,
      PARAMS.REST_BONUS,
      PARAMS.MEDITATION_BONUS,
      PARAMS.CONCENTRATION_BONUS,
      PARAMS.REST_MOD,
      PARAMS.MEDITATION_MOD,
      PARAMS.CONCENTRATION_MOD,
     },
    };

    String[] INFO_TABLE_NAMES = {
     "Physical", "Combat", "Magic", "Misc", "Rolls", "Mods"
    };

    VALUE[][] UNIT_INFO_PARAMS_MODS = {
     {
      PARAMS.COUNTER_MOD,
      PARAMS.THROW_ATTACK_MOD,
      PARAMS.THROW_DAMAGE_MOD,
      PARAMS.BLEEDING_MOD,
     },
     {
      PARAMS.INSTANT_DAMAGE_MOD,
      PARAMS.INSTANT_ATTACK_MOD,
      PARAMS.INSTANT_DEFENSE_MOD,
      PARAMS.AOO_DAMAGE_MOD,
      PARAMS.AOO_ATTACK_MOD,
      PARAMS.AOO_DEFENSE_MOD,
      PARAMS.COUNTER_ATTACK_MOD,
      PARAMS.COUNTER_DEFENSE_MOD,
     },
    };

    VALUE[][] UNIT_INFO_PARAMS_ROLLS = {
     {
             PARAMS.REFLEX_ROLL_SAVE_BONUS, PARAMS.REFLEX_ROLL_BEAT_BONUS,
             PARAMS.MIGHT_ROLL_SAVE_BONUS, PARAMS.MIGHT_ROLL_BEAT_BONUS,
             PARAMS.GRIT_ROLL_SAVE_BONUS, PARAMS.GRIT_ROLL_BEAT_BONUS,
     },
     {
      PARAMS.WIT_ROLL_SAVE_BONUS, PARAMS.WIT_ROLL_BEAT_BONUS,
      PARAMS.DETECTION_ROLL_SAVE_BONUS, PARAMS.DETECTION_ROLL_BEAT_BONUS,
             PARAMS.LUCK_ROLL_SAVE_BONUS, PARAMS.LUCK_ROLL_BEAT_BONUS,
     },
            {
                    PARAMS.SPIRIT_ROLL_SAVE_BONUS, PARAMS.SPIRIT_ROLL_BEAT_BONUS,
            },
    };
    VALUE[][][] UNIT_INFO_PARAMS = {
     UNIT_INFO_PARAMS_GENERAL,
     UNIT_INFO_PARAMS_COMBAT,
     UNIT_INFO_PARAMS_MAGIC,
     UNIT_INFO_PARAMS_MISC,
     UNIT_INFO_PARAMS_ROLLS,
     UNIT_INFO_PARAMS_MODS,
    };

    //                                   <><><><><>


    VALUE ACTION_TOOLTIP_HEADER_KEY = G_PROPS.NAME;
    VALUE[] ACTION_TOOLTIP_BASE_KEYS = {
     PARAMS.BASE_DAMAGE,
     PARAMS.COUNTER_MOD,
     PARAMS.INSTANT_DAMAGE_MOD,
     PARAMS.AOO_DAMAGE_MOD,
     PARAMS.SIDE_DAMAGE_MOD,
     PARAMS.DIAGONAL_DAMAGE_MOD
    };

    VALUE[] ACTION_TOOLTIP_RANGE_KEYS = {
     PARAMS.DAMAGE_MOD,
    };

    PARAMS[][] ACTION_TOOLTIP_PARAMS_TEXT = {
     {
      PARAMS.CRITICAL_MOD,
      PARAMS.ACCURACY,
     },

     {
      PARAMS.BLEEDING_MOD,
      PARAMS.DURABILITY_DAMAGE_MOD
     },


    };

    Map<VALUE, Pair<PARAMS, PARAMS>> ACTION_TOOLTIPS_PARAMS_MAP = _buildMap();

    static Map<VALUE, Pair<PARAMS, PARAMS>> _buildMap() {
        Map<VALUE, Pair<PARAMS, PARAMS>> map = new HashMap<>();

        map.put(G_PROPS.NAME, new ImmutablePair<>(PARAMS.DAMAGE_BONUS, PARAMS.ATTACK));
        map.put(PARAMS.BASE_DAMAGE, new ImmutablePair<>(PARAMS.DAMAGE, PARAMS.ATTACK));
        map.put(PARAMS.COUNTER_MOD, new ImmutablePair<>(PARAMS.COUNTER_MOD, PARAMS.COUNTER_ATTACK_MOD));
        map.put(PARAMS.INSTANT_DAMAGE_MOD, new ImmutablePair<>(PARAMS.INSTANT_DAMAGE_MOD, PARAMS.INSTANT_ATTACK_MOD));
        map.put(PARAMS.AOO_DAMAGE_MOD, new ImmutablePair<>(PARAMS.AOO_DAMAGE_MOD, PARAMS.AOO_ATTACK_MOD));
        map.put(PARAMS.SIDE_DAMAGE_MOD, new ImmutablePair<>(PARAMS.SIDE_DAMAGE_MOD, PARAMS.SIDE_ATTACK_MOD));
        map.put(PARAMS.DIAGONAL_DAMAGE_MOD, new ImmutablePair<>(PARAMS.DIAGONAL_DAMAGE_MOD, PARAMS.DIAGONAL_ATTACK_MOD));


        map.put(PARAMS.DAMAGE_MOD, new ImmutablePair<>(PARAMS.DAMAGE_MOD, PARAMS.ATTACK_MOD));

        return map;
    }
}
